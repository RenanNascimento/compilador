program				::= program decl-list stmt-list end
decl-list			::= decl decl-list | λ
decl				::= type ident-list ";"
ident-list			::= identifier ident-list'
ident-list'			::= "," identifier ident-list' | λ
type				::= int | string
stmt-list			::= stmt stmt-list'
stmt-list'			::= stmt stmt-list' | λ
stmt				::= assign-stmt ";"  |	if-stmt  |  while-stmt | read-stmt ";"  |  write-stmt ";"
assign-stmt			::= identifier "=" simple-expr
if-stmt				::= if  expression  then  stmt-list  if-stmt' end
if-stmt'			::=	else stmt-list | λ
while-stmt			::= do stmt-list stmt-sufix
stmt-sufix			::= while expression end
read-stmt			::= scan  "("  identifier  ")"
write-stmt			::= print  "("  simple-expr  ")"
expression			::= simple-expr  expression'
expression'			::= relop  simple-expr	|	λ
simple-expr			::= term  simple-expr'
simple-expr'		::= addop term simple-expr'  | λ  
term                ::= factor-a  term'
term'               ::= mulop factor-a term' | λ
factor-a			::= factor  |  !  factor  |  "-"  factor
factor          	::= identifier  |  constant  |  "("  expression  ")"
relop				::= "==" |  ">" | "<" | "!=" | ">=" | "<="
addop				::= "+" 	|  "-"  |  "||"
mulop               ::= "*" 	|  "/"  |  "&&"
constant            ::= integer_const  |  literal