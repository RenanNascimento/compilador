# 4 "code_lexer.mll"
 
  open Printf
  open Lexing
  open Instr
  open Code_parser

  let string_buffer = Buffer.create 512

  exception LexicalError of int

  let keyword_list = [
    "add", INSTR Add; 
    "sub", INSTR Sub;
    "mul", INSTR Mul;
    "div", INSTR Div;
    "mod", INSTR Mod;
    "not", INSTR Not;
    "inf", INSTR Inf;
    "infeq", INSTR Infeq;
    "sup", INSTR Sup;
    "supeq", INSTR Supeq;
    "fadd", INSTR Fadd;
    "fsub", INSTR Fsub;
    "fmul", INSTR Fmul;
    "fdiv", INSTR Fdiv;
    "fcos", INSTR Fcos;
    "fsqrt", INSTR Fsqrt;
    "fsin", INSTR Fsin;
    "padd", INSTR Padd;
    "concat", INSTR Concat;
    "equal", INSTR Equal;
    "isaddr", INSTR Is_addr;
    "irandom" , INSTR Irandom;
    "frandom" , INSTR Frandom;
    "atoi", INSTR Atoi;
    "atof", INSTR Atof;
    "itof", INSTR Itof;
    "ftoi", INSTR Ftoi;
    "stri", INSTR Stri;
    "strf", INSTR Strf;
    "pushsp", INSTR Pushsp;
    "pushfp", INSTR Pushfp;
    "pushgp", INSTR Pushgp;
    "loadn", INSTR Loadn;
    "storen", INSTR Storen ; 
    "swap", INSTR Swap;
    "writei", INSTR Writei;
    "writef", INSTR Writef;
    "writes", INSTR Writes;
    "read", INSTR Read;
    "drawline", INSTR DrawLine;
    "drawpoint", INSTR DrawPoint;
    "drawcircle", INSTR DrawCircle;
    "drawrect", INSTR DrawRect;
    "fillrect", INSTR FillRect;
    "setcolor", INSTR SetColor;
    "cleardrawingarea", INSTR ClearDrawingArea;
    "opendrawingarea", INSTR OpenDrawingArea;
    "getmouse" , INSTR GetMouse;
    "refresh", INSTR Refresh;
    "call", INSTR Call;
    "return", INSTR Return;
    "start", INSTR Start;
    "nop", INSTR Nop;
    "stop", INSTR Stop; 
    "allocn", INSTR Allocn;
    "free", INSTR Free;
    "dupn", INSTR Dupn;
    "popn", INSTR Popn;
    (* maze *)
    "get", INSTR Get;
    "set", INSTR Set;
    "move", INSTR Move;
    "turnleft", INSTR TurnLeft;
    "turnright", INSTR TurnRight;
    (* instructions avec arguments *)
    "pushi", PUSHI;
    "pushn", PUSHN;
    "pushf", PUSHF;
    "pushs", PUSHS;
    "pushg", PUSHG;
    "pushl", PUSHL;
    "load", LOAD;
    "dup", DUP;
    "pop", POP;
    "storel", STOREL;
    "storeg", STOREG;
    "store", STORE;
    "check", CHECK;
    "label", LABEL;
    "jump", JUMP;
    "jz", JZ;
    "pusha", PUSHA;
    "err", ERR;
    "alloc", ALLOC;
 ]

  let keyword =
    let t = Hashtbl.create 73 in
    List.iter (fun (name,kwd) -> Hashtbl.add t name kwd) keyword_list;
    fun s -> 
      let ls = String.lowercase s in
      try Hashtbl.find t ls with Not_found -> IDENT s


# 108 "code_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\246\255\247\255\248\255\077\000\087\000\251\255\252\255\
    \114\000\012\000\005\000\001\000\194\000\210\000\220\000\232\000\
    \114\000\249\255\244\000\062\000\255\255\253\255\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\005\000\009\000\255\255\255\255\
    \002\000\009\000\000\000\001\000\255\255\006\000\006\000\255\255\
    \255\255\255\255\004\000\005\000\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \255\255\255\255\255\255\011\000\255\255\255\255\255\255\255\255\
    \018\000\000\000\018\000\255\255\000\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\010\000\010\000\255\255\000\000\010\000\010\000\010\000\
    \000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \010\000\000\000\003\000\000\000\000\000\010\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\006\000\005\000\000\000\009\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\007\000\011\000\000\000\000\000\000\000\000\000\
    \000\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\000\000\000\000\000\000\000\000\008\000\
    \007\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\013\000\017\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\000\000\012\000\000\000\020\000\000\000\000\000\000\000\
    \000\000\008\000\021\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\022\000\000\000\000\000\000\000\
    \000\000\000\000\012\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\000\000\019\000\000\000\
    \000\000\008\000\000\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\015\000\000\000\015\000\
    \000\000\000\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\000\000\000\000\255\255\000\000\
    \002\000\255\255\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\255\255\012\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\011\000\255\255\000\000\010\000\010\000\
    \255\255\255\255\010\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\255\255\255\255\010\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\009\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\004\000\016\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\255\255\004\000\255\255\016\000\255\255\255\255\255\255\
    \255\255\008\000\019\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\019\000\255\255\255\255\255\255\
    \255\255\255\255\004\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\255\255\016\000\255\255\
    \255\255\008\000\255\255\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\012\000\255\255\012\000\
    \255\255\255\255\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\255\255\255\255\018\000\255\255\
    \000\000\011\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\018\000\013\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\013\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \018\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\016\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\018\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 119 "code_lexer.mll"
            ( token lexbuf )
# 271 "code_lexer.ml"

  | 1 ->
let
# 120 "code_lexer.mll"
                      c
# 277 "code_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_curr_pos in
# 120 "code_lexer.mll"
                        ( COMMENT c )
# 281 "code_lexer.ml"

  | 2 ->
# 121 "code_lexer.mll"
                        ( let s = lexeme lexbuf in keyword s )
# 286 "code_lexer.ml"

  | 3 ->
# 122 "code_lexer.mll"
                        ( COLON )
# 291 "code_lexer.ml"

  | 4 ->
# 123 "code_lexer.mll"
                        ( COMMA )
# 296 "code_lexer.ml"

  | 5 ->
# 124 "code_lexer.mll"
                       ( INT (int_of_string (lexeme lexbuf)) )
# 301 "code_lexer.ml"

  | 6 ->
# 125 "code_lexer.mll"
                        ( FLOAT (float_of_string (lexeme lexbuf)) )
# 306 "code_lexer.ml"

  | 7 ->
# 127 "code_lexer.mll"
      ( Buffer.clear string_buffer;
	string lexbuf;
	STRING (Buffer.contents string_buffer) )
# 313 "code_lexer.ml"

  | 8 ->
# 130 "code_lexer.mll"
          ( EOF )
# 318 "code_lexer.ml"

  | 9 ->
# 131 "code_lexer.mll"
      ( raise (LexicalError (lexeme_start lexbuf)) )
# 323 "code_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and string lexbuf =
    __ocaml_lex_string_rec lexbuf 16
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 138 "code_lexer.mll"
      ( lexeme_end lexbuf )
# 334 "code_lexer.ml"

  | 1 ->
# 140 "code_lexer.mll"
      ( Buffer.add_char string_buffer '\n';
	string lexbuf )
# 340 "code_lexer.ml"

  | 2 ->
# 143 "code_lexer.mll"
      ( Buffer.add_char string_buffer '\\';
	string lexbuf )
# 346 "code_lexer.ml"

  | 3 ->
# 146 "code_lexer.mll"
      ( Buffer.add_char string_buffer '"';
	string lexbuf )
# 352 "code_lexer.ml"

  | 4 ->
# 149 "code_lexer.mll"
      ( Buffer.add_string string_buffer (lexeme lexbuf);
	string lexbuf )
# 358 "code_lexer.ml"

  | 5 ->
# 152 "code_lexer.mll"
      ( raise (LexicalError (lexeme_start lexbuf)) )
# 363 "code_lexer.ml"

  | 6 ->
# 154 "code_lexer.mll"
      ( raise (LexicalError (lexeme_start lexbuf)) )
# 368 "code_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_string_rec lexbuf __ocaml_lex_state

;;

# 157 "code_lexer.mll"
 


# 378 "code_lexer.ml"
