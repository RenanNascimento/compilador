#
# sample Makefile for Objective Caml
# Copyright (C) 2001 Jean-Christophe FILLIATRE
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License version 2, as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# 
# See the GNU Library General Public License version 2 for more details
# (enclosed in the file LGPL).

# where to install the binaries
prefix=$(DESTDIR)//usr/local
exec_prefix=${prefix}
BINDIR=${exec_prefix}/bin

# where to install the man page
MANDIR=${prefix}/man

# other variables set by ./configure
OCAMLC   = ocamlc
OCAMLOPT = ocamlopt
OCAMLDEP = ocamldep
OCAMLLEX = ocamllex
OCAMLYACC= ocamlyacc
OCAMLLIB = /usr/lib/ocaml
OCAMLBEST= opt
OCAMLVERSION = 4.02.3
OCAMLWEB = true
OCAMLWIN32 = no
EXE = 

INCLUDES = -I +lablgtk2
BFLAGS = -g $(INCLUDES) -dtypes
OFLAGS = $(INCLUDES) -dtypes

# main target
#############

all: vm gvm

local: vm gvm
	cp vm gvm $(HOME)/bin/$(OSTYTPE)

# bytecode and native-code compilation
######################################

CMO = version.cmo util.cmo hstring.cmo label.cmo code_parser.cmo \
      code_lexer.cmo code.cmo maze.cmo vm.cmo 
CMX = $(CMO:.cmo=.cmx)

GENERATED = version.ml code_lexer.ml code_parser.mli code_parser.ml

opt: vm gvm
byte: vm.byte gvm.byte

vm: $(CMX) main.cmx
	$(OCAMLOPT) $(OFLAGS) -o $@ $^

vm.byte: $(CMO) main.cmo
	$(OCAMLC) $(BFLAGS) -o $@ $^

gvm: $(CMX) gmain.cmx
	$(OCAMLOPT) -o $@ -I +lablgtk2 lablgtk.cmxa $^

gvm.byte: $(CMO) gmain.cmo
	$(OCAMLC) -g -o $@ -I +lablgtk2 lablgtk.cma $^

gvm.static: $(CMX) gmain.cmx
	$(OCAMLOPT) -o $@ -I +lablgtk2 lablgtk.cmxa $^ -cclib "-static"

VERSION=1.7

version.ml: Makefile
	echo "let version = \""$(VERSION)"\"" > version.ml
	echo "let date = \""`date`"\"" >> version.ml

# installation
##############

install-indep: 
	mkdir -p $(BINDIR)

install: install-opt

install-byte: byte install-indep
	cp -f vm.byte $(BINDIR)/vm$(EXE)
	cp -f gvm.byte $(BINDIR)/gvm$(EXE)

install-opt: opt install-indep
	cp -f vm $(BINDIR)/vm$(EXE)
	cp -f gvm $(BINDIR)/gvm$(EXE)

# documentation
###############

DOCFILES = doc/doc.ps doc/doc.html

doc: $(DOCFILES)

$(DOCFILES): doc/doc.tex
	make -C doc

# export
########

EXPORTDIR=vm-$(VERSION)
TAR=$(EXPORTDIR).tar

FTP = /users/demons/conchon/WWW/compilation/vm

FILES = *.ml* Makefile.in configure configure.in .depend

export: source

source: 
	mkdir -p export/$(EXPORTDIR)
	cp $(FILES) export/$(EXPORTDIR)
	cd export ; tar cf $(TAR) $(EXPORTDIR) ; gzip -f --best $(TAR)
	cp export/$(TAR).gz $(FTP)

BINARY = $(EXPORTDIR)-$(OSTYPE)
BINARYTAR=$(BINARY).tar

BINARYFILES = 

binary: opt $(DOCFILES)
	mkdir -p export/$(BINARY)
	cp $(BINARYFILES) $(DOCFILES) export/$(BINARY)
	cp vm gvm export/$(BINARY)/
	(cd export; tar czf $(BINARY).tar.gz $(BINARY))
	cp export/$(BINARY).tar.gz $(FTP)

toie2:
	cd ..; scp -r vm filliatr@c21.ie2.u-psud.fr:

ie2: vm gvm
	cp vm gvm $(HOME)/bin
	cp vm gvm /308/Public_Enseignement/TER-COMPIL/bin

# literate programming
######################

SOURCES = 

$(NAME).tex: $(SOURCES)
	$(OCAMLWEB) -o $@ $^

# generic rules
###############

.SUFFIXES: .mli .ml .cmi .cmo .cmx .mll .mly .tex .dvi .ps .html

.mli.cmi:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.cmo:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.o:
	$(OCAMLOPT) -c $(OFLAGS) $<

.ml.cmx:
	$(OCAMLOPT) -c $(OFLAGS) $<

.mll.ml:
	$(OCAMLLEX) $<

.mly.ml:
	$(OCAMLYACC) -v $<

.mly.mli:
	$(OCAMLYACC) -v $<

.tex.dvi:
	latex $< && latex $<

.dvi.ps:
	dvips $< -o $@ 

.tex.html:
	hevea $<

# Emacs tags
############

tags:
	find . -name "*.ml*" | sort -r | xargs \
	etags "--regex=/let[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/let[ \t]+rec[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/and[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/type[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/exception[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/val[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/module[ \t]+\([^ \t]+\)/\1/"

# Makefile is rebuilt whenever Makefile.in or configure.in is modified
######################################################################

Makefile: Makefile.in config.status
	./config.status

config.status: configure
	./config.status --recheck

configure: configure.in
	autoconf 

# clean
#######

clean::
	rm -f *.cm[iox] *.o *~
	rm -f $(GENERATED) parser.output
	rm -f vm vm.byte gvm gvm.byte
	make -C doc clean

dist-clean distclean:: clean
	rm -f Makefile config.cache config.log config.status

# depend
########

.depend depend:: $(GENERATED)
	rm -f .depend
	$(OCAMLDEP) $(INCLUDES) *.ml *.mli > .depend

include .depend
